"""empty message

Revision ID: 43bedc23a64
Revises: b5bcc5c895
Create Date: 2015-12-03 19:52:19.191546

"""
import sqlalchemy as sa
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy_searchable import make_searchable
from sqlalchemy_utils.types import TSVectorType
import sqlalchemy_utils
# revision identifiers, used by Alembic.
revision = '43bedc23a64'
down_revision = 'b5bcc5c895'

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects.postgresql import HSTORE
from sqlalchemy_searchable import sync_trigger, vectorizer

def upgrade():
    vectorizer.clear()

    conn = op.get_bind()
    op.add_column('groups', sa.Column('title', HSTORE))

    metadata = sa.MetaData(bind=conn)
    articles = sa.Table('groups', metadata, autoload=True)

    @vectorizer(articles.c.name_translations)
    def hstore_vectorizer(column):
        return sa.cast(sa.func.avals(column), sa.Text)

    op.add_column('groups', sa.Column('content', sa.Text))
    sync_trigger(
        conn,
        'groups',
        'search_vector',
        ['title', 'content'],
        metadata=metadata
    )


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admins',
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('friends',
    sa.Column('friend1_id', sa.Integer(), nullable=True),
    sa.Column('friend2_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['friend1_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['friend2_id'], ['users.id'], )
    )
    op.create_table('members',
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('association_table',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('post_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['posts.id'], )
    )
    op.create_table('group_posts',
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('post_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], )
    )
    op.create_table('post_likes',
    sa.Column('post_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('comment_likes',
    sa.Column('comment_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['comment_id'], ['comments.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.add_column(u'comments', sa.Column('content', sa.String(), nullable=False))
    op.add_column(u'comments', sa.Column('parent', sa.Integer(), nullable=True))
    op.add_column(u'comments', sa.Column('poster', sa.Integer(), nullable=True))
    op.add_column(u'comments', sa.Column('poster_name', sa.String(), nullable=True))
    op.add_column(u'comments', sa.Column('time_posted', sa.DateTime(), nullable=True))
    op.create_foreign_key(None, 'comments', 'posts', ['parent'], ['id'])
    op.create_foreign_key(None, 'comments', 'users', ['poster'], ['id'])
    op.add_column(u'friend_requests', sa.Column('accepted', sa.Boolean(), nullable=True))
    op.add_column(u'friend_requests', sa.Column('user_sent_from', sa.Integer(), nullable=True))
    op.add_column(u'friend_requests', sa.Column('user_sent_to', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'friend_requests', 'users', ['user_sent_from'], ['id'])
    op.create_foreign_key(None, 'friend_requests', 'users', ['user_sent_to'], ['id'])
    op.add_column(u'group_requests', sa.Column('accepted', sa.Boolean(), nullable=True))
    op.add_column(u'group_requests', sa.Column('group', sa.Integer(), nullable=True))
    op.add_column(u'group_requests', sa.Column('user', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'group_requests', 'users', ['user'], ['id'])
    op.create_foreign_key(None, 'group_requests', 'groups', ['group'], ['id'])
    op.add_column(u'groups', sa.Column('description', sa.String(), nullable=True))
    op.add_column(u'groups', sa.Column('name', sa.String(), nullable=False))
    op.add_column(u'groups', sa.Column('private', sa.Boolean(), nullable=True))
    op.add_column(u'groups', sa.Column('search_vector', sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True))
    op.create_index('ix_groups_search_vector', 'groups', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_unique_constraint(None, 'groups', ['name'])
    op.add_column(u'messages', sa.Column('content', sa.String(), nullable=False))
    op.add_column(u'messages', sa.Column('read', sa.Boolean(), nullable=True))
    op.add_column(u'messages', sa.Column('user_from', sa.Integer(), nullable=True))
    op.add_column(u'messages', sa.Column('user_to', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'messages', 'users', ['user_from'], ['id'])
    op.create_foreign_key(None, 'messages', 'users', ['user_to'], ['id'])
    op.add_column(u'posts', sa.Column('content', sa.String(), nullable=False))
    op.add_column(u'posts', sa.Column('group', sa.Integer(), nullable=True))
    op.add_column(u'posts', sa.Column('poster', sa.Integer(), nullable=True))
    op.add_column(u'posts', sa.Column('poster_name', sa.String(), nullable=True))
    op.add_column(u'posts', sa.Column('self_post', sa.Boolean(), nullable=True))
    op.add_column(u'posts', sa.Column('time_posted', sa.DateTime(), nullable=True))
    op.add_column(u'posts', sa.Column('title', sa.String(), nullable=False))
    op.create_foreign_key(None, 'posts', 'groups', ['group'], ['id'])
    op.create_foreign_key(None, 'posts', 'users', ['poster'], ['id'])
    op.add_column(u'users', sa.Column('email', sa.String(), nullable=False))
    op.add_column(u'users', sa.Column('password', sa.String(), nullable=False))
    op.add_column(u'users', sa.Column('user_name', sa.String(), nullable=False))
    op.create_unique_constraint(None, 'users', ['email'])
    op.create_unique_constraint(None, 'users', ['user_name'])
    ### end Alembic commands ###
